import 'base'

def malloc{T}(size as Integer) as UnsafePointer{T}
    let pointer = ccall malloc(Integer) as UnsafePointer{Integer8} using size
    return pointer as UnsafePointer{T}
end

def free{T}(pointer as UnsafePointer{T}) as Void
    let void_pointer = pointer as UnsafePointer{Integer8}
    ccall free(UnsafePointer{Integer8}) as Void using void_pointer
end

type Array{T}
    elements as UnsafePointer{T}
    size as UnsignedInteger
    capacity as UnsignedInteger
end

def create_array{T}(n as Integer) as Array{T}
    let block_size = 100 * strideof Integer
end

let a = create_array{Integer}(n: 10)
