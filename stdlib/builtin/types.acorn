# void

type builtin Void

let builtin nil as Void

# integers

type builtin Int8
type builtin Int16
type builtin Int32
type builtin Int64
type builtin Int128

type builtin UInt8
type builtin UInt16
type builtin UInt32
type builtin UInt64
type builtin UInt128

type Int as Int64
type UInt as UInt64

def builtin *(a as Int8, b as Int8) as Int8
def builtin *(a as Int16, b as Int16) as Int16
def builtin *(a as Int32, b as Int32) as Int32
def builtin *(a as Int64, b as Int64) as Int64

def builtin +(a as Int8, b as Int8) as Int8
def builtin +(a as Int16, b as Int16) as Int16
def builtin +(a as Int32, b as Int32) as Int32
def builtin +(a as Int64, b as Int64) as Int64

def builtin -(a as Int8, b as Int8) as Int8
def builtin -(a as Int16, b as Int16) as Int16
def builtin -(a as Int32, b as Int32) as Int32
def builtin -(a as Int64, b as Int64) as Int64

def -(n as Int64)
  0 - n
end

def builtin +(a as UInt8, b as UInt8) as UInt8
def builtin +(a as UInt16, b as UInt16) as UInt16
def builtin +(a as UInt32, b as UInt32) as UInt32
def builtin +(a as UInt64, b as UInt64) as UInt64

# floats

type builtin Float16
type builtin Float32
type builtin Float64
type builtin Float128

type Float as Float64

def builtin +(a as Float16, b as Float16) as Float16
def builtin +(a as Float32, b as Float32) as Float32
def builtin +(a as Float64, b as Float64) as Float64

# boolean

type builtin Bool

let builtin true as Bool
let builtin false as Bool

def builtin ==(a as Bool, b as Bool) as Bool
def builtin ==(a as Int64, b as Int64) as Bool
def builtin ==(a as UInt64, b as UInt64) as Bool

def builtin !=(a as Bool, b as Bool) as Bool
def builtin !=(a as Int64, b as Int64) as Bool
def builtin !=(a as UInt64, b as UInt64) as Bool

def builtin <(a as Int64, b as Int64) as Bool
def builtin <(a as UInt64, b as UInt64) as Bool

def builtin <=(a as Int64, b as Int64) as Bool
def builtin <=(a as UInt64, b as UInt64) as Bool

def builtin >(a as Int64, b as Int64) as Bool
def builtin >(a as UInt64, b as UInt64) as Bool

def builtin >=(a as Int64, b as Int64) as Bool
def builtin >=(a as UInt64, b as UInt64) as Bool

# pointers

type builtin UnsafePointer{T}

# conversions

def builtin to_int(self as Float64) as Int64
def builtin to_float(self as Int64) as Float64
