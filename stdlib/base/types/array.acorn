import 'base/memory'

type Array{T}
    elements as UnsafePointer{T}
    length as Integer
    capacity as Integer
end

def create_array{T}(t as Type{T}, capacity as Integer) as Array{T}
    let elements = malloc(strideof T * capacity) as UnsafePointer{T}
    return new Array{T}(elements: elements, size: 0, capacity: capacity)
end

def free{T}(inout array as Array{T}) as Void
    free(array.elements)
end

def setindex{T}(inout array as Array{T}, key as Integer, value as T) as Void
    array.elements[key] = value
end

def getindex{T}(array as Array{T}, key as Integer) as T
    return array.elements[key]
end

def append{T}(inout array as Array{T}, value as T) as Void
    array.length = array.length + 1
    array[array.length - 1] = value
end
