import 'base/memory'

type Array{T}
    elements as UnsafePointer{T}
    length as Integer
    capacity as Integer
end

def create_integer_array(capacity as Integer) as Array{Integer}
    let elements = malloc(strideof Integer * capacity) as UnsafePointer{Integer}
    return new Array{Integer}(elements: elements, size: 0, capacity: capacity)
end

def free!(inout array as Array{Integer}) as Void
    free(array.elements as UnsafePointer{Integer8})
end

def setindex!{T}(inout array as Array{T}, key as Integer, value as T) as Void
    array.elements[key] = value
end

def getindex(array as Array{Integer}, key as Integer) as Integer
    return array.elements[key]
end

def append!{T}(inout array as Array{T}, value as T) as Void
    array.length = array.length + 1
    array[array.length - 1] = value
end
