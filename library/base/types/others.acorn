# Maybe type.
type Maybe{T} as enum:
    Nothing
    Some(T)

# Enumeration types.
type Enumeration{T}:
    iterator as ArrayIterator{T}
    state as Int

func enumerate{T}(array as Array{T}) as Enumeration{T}:
    return Enumeration{T}(array=iterate(array), state=0)

func next{T}(enumeration as Enumeration{T}) as Maybe{Tuple{Int, T}}:
    let item = next(enumeration.iterator)
    if let n as Void = item:
        return Nothing
    else:
        enumeration.state += 1
        return (item, enumeration.state)
